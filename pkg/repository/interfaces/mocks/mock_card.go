// Code generated by MockGen. DO NOT EDIT.
// Source: ./card.go

// Package mock_card is a generated GoMock package.
package mock_units

import (
	context "context"
	structs "flash-card-manager/pkg/repository/structs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCardRepository is a mock of CardRepository interface.
type MockCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardRepositoryMockRecorder
}

// MockCardRepositoryMockRecorder is the mock recorder for MockCardRepository.
type MockCardRepositoryMockRecorder struct {
	mock *MockCardRepository
}

// NewMockCardRepository creates a new mock instance.
func NewMockCardRepository(ctrl *gomock.Controller) *MockCardRepository {
	mock := &MockCardRepository{ctrl: ctrl}
	mock.recorder = &MockCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRepository) EXPECT() *MockCardRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCardRepository) Add(ctx context.Context, card structs.Card) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, card)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockCardRepositoryMockRecorder) Add(ctx, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCardRepository)(nil).Add), ctx, card)
}

// Delete mocks base method.
func (m *MockCardRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCardRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCardRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockCardRepository) GetByID(ctx context.Context, id int64) (*structs.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*structs.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCardRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCardRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockCardRepository) Update(ctx context.Context, card structs.Card) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, card)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCardRepositoryMockRecorder) Update(ctx, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCardRepository)(nil).Update), ctx, card)
}
