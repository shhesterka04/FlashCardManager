// Code generated by MockGen. DO NOT EDIT.
// Source: ./deck.go

// Package mock_deck is a generated GoMock package.
package mock_units

import (
	context "context"
	structs "flash-card-manager/pkg/repository/structs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDeckRepository is a mock of DeckRepository interface.
type MockDeckRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeckRepositoryMockRecorder
}

// MockDeckRepositoryMockRecorder is the mock recorder for MockDeckRepository.
type MockDeckRepositoryMockRecorder struct {
	mock *MockDeckRepository
}

// NewMockDeckRepository creates a new mock instance.
func NewMockDeckRepository(ctrl *gomock.Controller) *MockDeckRepository {
	mock := &MockDeckRepository{ctrl: ctrl}
	mock.recorder = &MockDeckRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeckRepository) EXPECT() *MockDeckRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDeckRepository) Add(ctx context.Context, deck structs.Deck) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, deck)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockDeckRepositoryMockRecorder) Add(ctx, deck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDeckRepository)(nil).Add), ctx, deck)
}

// Delete mocks base method.
func (m *MockDeckRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeckRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeckRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockDeckRepository) GetByID(ctx context.Context, id int64) (*structs.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*structs.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDeckRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDeckRepository)(nil).GetByID), ctx, id)
}

// GetWithCardsByID mocks base method.
func (m *MockDeckRepository) GetWithCardsByID(ctx context.Context, id int64) (*structs.DeckWithCards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithCardsByID", ctx, id)
	ret0, _ := ret[0].(*structs.DeckWithCards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithCardsByID indicates an expected call of GetWithCardsByID.
func (mr *MockDeckRepositoryMockRecorder) GetWithCardsByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithCardsByID", reflect.TypeOf((*MockDeckRepository)(nil).GetWithCardsByID), ctx, id)
}

// Update mocks base method.
func (m *MockDeckRepository) Update(ctx context.Context, deck structs.Deck) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, deck)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDeckRepositoryMockRecorder) Update(ctx, deck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeckRepository)(nil).Update), ctx, deck)
}
