// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: deck.proto

package grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeckService_CreateDeck_FullMethodName  = "/grpc.DeckService/CreateDeck"
	DeckService_GetDeckById_FullMethodName = "/grpc.DeckService/GetDeckById"
	DeckService_UpdateDeck_FullMethodName  = "/grpc.DeckService/UpdateDeck"
	DeckService_DeleteDeck_FullMethodName  = "/grpc.DeckService/DeleteDeck"
)

// DeckServiceClient is the client API for DeckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeckServiceClient interface {
	CreateDeck(ctx context.Context, in *CreateDeckRequest, opts ...grpc.CallOption) (*DeckResponse, error)
	GetDeckById(ctx context.Context, in *GetDeckByIdRequest, opts ...grpc.CallOption) (*DeckWithCardsResponse, error)
	UpdateDeck(ctx context.Context, in *UpdateDeckRequest, opts ...grpc.CallOption) (*DeckResponse, error)
	DeleteDeck(ctx context.Context, in *DeleteDeckRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type deckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeckServiceClient(cc grpc.ClientConnInterface) DeckServiceClient {
	return &deckServiceClient{cc}
}

func (c *deckServiceClient) CreateDeck(ctx context.Context, in *CreateDeckRequest, opts ...grpc.CallOption) (*DeckResponse, error) {
	out := new(DeckResponse)
	err := c.cc.Invoke(ctx, DeckService_CreateDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) GetDeckById(ctx context.Context, in *GetDeckByIdRequest, opts ...grpc.CallOption) (*DeckWithCardsResponse, error) {
	out := new(DeckWithCardsResponse)
	err := c.cc.Invoke(ctx, DeckService_GetDeckById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) UpdateDeck(ctx context.Context, in *UpdateDeckRequest, opts ...grpc.CallOption) (*DeckResponse, error) {
	out := new(DeckResponse)
	err := c.cc.Invoke(ctx, DeckService_UpdateDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) DeleteDeck(ctx context.Context, in *DeleteDeckRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, DeckService_DeleteDeck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeckServiceServer is the server API for DeckService service.
// All implementations must embed UnimplementedDeckServiceServer
// for forward compatibility
type DeckServiceServer interface {
	CreateDeck(context.Context, *CreateDeckRequest) (*DeckResponse, error)
	GetDeckById(context.Context, *GetDeckByIdRequest) (*DeckWithCardsResponse, error)
	UpdateDeck(context.Context, *UpdateDeckRequest) (*DeckResponse, error)
	DeleteDeck(context.Context, *DeleteDeckRequest) (*empty.Empty, error)
	mustEmbedUnimplementedDeckServiceServer()
}

// UnimplementedDeckServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeckServiceServer struct {
}

func (UnimplementedDeckServiceServer) CreateDeck(context.Context, *CreateDeckRequest) (*DeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeck not implemented")
}
func (UnimplementedDeckServiceServer) GetDeckById(context.Context, *GetDeckByIdRequest) (*DeckWithCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeckById not implemented")
}
func (UnimplementedDeckServiceServer) UpdateDeck(context.Context, *UpdateDeckRequest) (*DeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeck not implemented")
}
func (UnimplementedDeckServiceServer) DeleteDeck(context.Context, *DeleteDeckRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeck not implemented")
}
func (UnimplementedDeckServiceServer) mustEmbedUnimplementedDeckServiceServer() {}

// UnsafeDeckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeckServiceServer will
// result in compilation errors.
type UnsafeDeckServiceServer interface {
	mustEmbedUnimplementedDeckServiceServer()
}

func RegisterDeckServiceServer(s grpc.ServiceRegistrar, srv DeckServiceServer) {
	s.RegisterService(&DeckService_ServiceDesc, srv)
}

func _DeckService_CreateDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).CreateDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_CreateDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).CreateDeck(ctx, req.(*CreateDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_GetDeckById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeckByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).GetDeckById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_GetDeckById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).GetDeckById(ctx, req.(*GetDeckByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_UpdateDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).UpdateDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_UpdateDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).UpdateDeck(ctx, req.(*UpdateDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_DeleteDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).DeleteDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_DeleteDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).DeleteDeck(ctx, req.(*DeleteDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeckService_ServiceDesc is the grpc.ServiceDesc for DeckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DeckService",
	HandlerType: (*DeckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeck",
			Handler:    _DeckService_CreateDeck_Handler,
		},
		{
			MethodName: "GetDeckById",
			Handler:    _DeckService_GetDeckById_Handler,
		},
		{
			MethodName: "UpdateDeck",
			Handler:    _DeckService_UpdateDeck_Handler,
		},
		{
			MethodName: "DeleteDeck",
			Handler:    _DeckService_DeleteDeck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deck.proto",
}
